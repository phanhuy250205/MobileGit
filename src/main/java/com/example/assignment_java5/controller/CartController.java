package com.example.assignment_java5.controller;

import com.example.assignment_java5.model.chitietdonhang;
import com.example.assignment_java5.model.donhang;
import com.example.assignment_java5.model.nhanvien;
import com.example.assignment_java5.model.sanpham;
import com.example.assignment_java5.repository.chitietdonhangreponsitory;
import com.example.assignment_java5.repository.donhangrepository;
import com.example.assignment_java5.repository.nhanvienrepository;
import com.example.assignment_java5.repository.sanphamrepository;
import com.example.assignment_java5.service.CartService;
import com.example.assignment_java5.service.impl.CartServiceImpl;
import jakarta.persistence.PersistenceContext;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.transaction.Transactional;
import jakarta.persistence.EntityManager;

@Controller
@RequestMapping("/cart")
public class CartController {

    private final donhangrepository donHangRepository;
    private final chitietdonhangreponsitory chiTietDonHangRepository;
    private final sanphamrepository sanPhamRepository;
    private final nhanvienrepository nhanVienRepository;

    @Autowired
    private CartServiceImpl cartService;
    @PersistenceContext
    private EntityManager entityManager;

    public CartController(donhangrepository donHangRepository,
                          chitietdonhangreponsitory chiTietDonHangRepository,
                          sanphamrepository sanPhamRepository,
                          nhanvienrepository nhanVienRepository) {
        this.donHangRepository = donHangRepository;
        this.chiTietDonHangRepository = chiTietDonHangRepository;
        this.sanPhamRepository = sanPhamRepository;
        this.nhanVienRepository = nhanVienRepository;
    }

    @PostMapping("/add")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> addToCart(@RequestParam Long sanPhamId, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        // üìå **Ki·ªÉm tra ƒëƒÉng nh·∫≠p**: ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            response.put("status", "error");
            response.put("message", "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.");
            return ResponseEntity.badRequest().body(response);
        }

        // üìå **Ki·ªÉm tra s·∫£n ph·∫©m**: X√°c nh·∫≠n s·∫£n ph·∫©m t·ªìn t·∫°i trong h·ªá th·ªëng tr∆∞·ªõc khi th√™m v√†o gi·ªè
        Optional<sanpham> optionalSanPham = sanPhamRepository.findById(sanPhamId);
        if (optionalSanPham.isEmpty()) {
            response.put("status", "error");
            response.put("message", "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
            return ResponseEntity.badRequest().body(response);
        }
        sanpham sanPham = optionalSanPham.get();
        if (sanPham.getSoLuong() <= 0) {
            response.put("status", "error");
            response.put("message", "S·∫£n Ph·∫©m ƒê√£ H·∫øt H√†ng");
            return ResponseEntity.badRequest().body(response);
        }

        // üìå **T·∫°o ho·∫∑c l·∫•y ƒë∆°n h√†ng**: T√¨m ƒë∆°n h√†ng ch∆∞a thanh to√°n ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
        Optional<donhang> optionalDonHang = donHangRepository.findByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        donhang donHang = optionalDonHang.orElseGet(() -> {
            donhang newDonHang = new donhang();
            newDonHang.setNhanVien(currentUser);
            newDonHang.setTrangThai("Ch∆∞a thanh to√°n");
            newDonHang.setTongTien(BigDecimal.ZERO);
            return donHangRepository.save(newDonHang);
        });

        // üìå **Th√™m chi ti·∫øt ƒë∆°n h√†ng**: N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ th√¨ tƒÉng s·ªë l∆∞·ª£ng, n·∫øu ch∆∞a th√¨ t·∫°o m·ªõi
        Optional<chitietdonhang> optionalChiTiet = chiTietDonHangRepository.findByDonHangAndSanPham(donHang, sanPham);
        chitietdonhang chiTiet;

        if (optionalChiTiet.isPresent()) {
            chiTiet = optionalChiTiet.get();
            chiTiet.setSoLuong(chiTiet.getSoLuong() + 1);
        } else {
            chiTiet = new chitietdonhang();
            chiTiet.setDonHang(donHang);
            chiTiet.setSanPham(sanPham);
            chiTiet.setSoLuong(1);
            chiTiet.setGia(sanPham.getGia());
        }

        chiTietDonHangRepository.save(chiTiet);

        // üìå **C·∫≠p nh·∫≠t t·ªïng ti·ªÅn**: T√≠nh l·∫°i t·ªïng ti·ªÅn c·ªßa ƒë∆°n h√†ng sau khi th√™m s·∫£n ph·∫©m
        BigDecimal newTotal = donHang.getTongTien().add(sanPham.getGia());
        donHang.setTongTien(newTotal);
        donHangRepository.save(donHang);

        // üìå **ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m**: T√≠nh s·ªë lo·∫°i s·∫£n ph·∫©m kh√°c nhau trong gi·ªè ƒë·ªÉ hi·ªÉn th·ªã tr√™n giao di·ªán
        int cartCount = (int) chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(currentUser.getId(), "Ch∆∞a thanh to√°n")
                .stream()
                .map(chitietdonhang::getSanPham)
                .distinct()
                .count();
        session.setAttribute("cartCount", cartCount);

        // üìå **Tr·∫£ ph·∫£n h·ªìi JSON**: G·ª≠i d·ªØ li·ªáu v·ªÅ giao di·ªán ƒë·ªÉ c·∫≠p nh·∫≠t m√† kh√¥ng c·∫ßn t·∫£i l·∫°i trang
        response.put("status", "success");
        response.put("cartCount", cartCount);
        response.put("totalAmount", donHang.getTongTien());

        return ResponseEntity.ok(response);
    }

    @GetMapping("/view")
    public String viewCart(Model model, HttpSession session) {
        // üìå **Ki·ªÉm tra ƒëƒÉng nh·∫≠p**: Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            System.out.println("üî¥ L·ªói: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.");
            return "redirect:/login";
        }

        // üìå **L·∫•y gi·ªè h√†ng**: Truy v·∫•n t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè c·ªßa nh√¢n vi√™n hi·ªán t·∫°i
        List<chitietdonhang> cartItems = chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(
                currentUser.getId(), "Ch∆∞a thanh to√°n"
        );

        model.addAttribute("chiTietDonHang", cartItems);

        // üìå **ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m**: ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng tr√™n giao di·ªán
        int cartCount = (int) cartItems.stream().map(chitietdonhang::getSanPham).distinct().count();
        session.setAttribute("cartCount", cartCount);

        // üìå **T√≠nh t·ªïng ti·ªÅn**: T√≠nh t·ªïng ti·ªÅn ƒë∆°n h√†ng d·ª±a tr√™n s·ªë l∆∞·ª£ng v√† gi√° t·ª´ng s·∫£n ph·∫©m
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (chitietdonhang item : cartItems) {
            if (item.getGia() != null) {
                totalAmount = totalAmount.add(item.getGia().multiply(BigDecimal.valueOf(item.getSoLuong())));
            }
        }

        // üìå **√Åp d·ª•ng gi·∫£m gi√°**: Gi·∫£m gi√° c·ªë ƒë·ªãnh v√† ƒë·∫£m b·∫£o t·ªïng ti·ªÅn kh√¥ng √¢m
        BigDecimal discount = new BigDecimal(2000000);
        BigDecimal finalTotal = totalAmount.subtract(discount).max(BigDecimal.ZERO);

        model.addAttribute("totalAmount", totalAmount);
        model.addAttribute("finalTotal", finalTotal);

        return "cart"; // Chuy·ªÉn ƒë·∫øn trang hi·ªÉn th·ªã gi·ªè h√†ng
    }

    @PostMapping("/update")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> updateQuantity(
            @RequestParam Long sanPhamId,
            @RequestParam int quantity,
            HttpSession session) {

        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }

        Optional<donhang> optionalDonHang = donHangRepository.findByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        if (optionalDonHang.isEmpty()) {
            return ResponseEntity.badRequest().body(null);
        }
        donhang donHang = optionalDonHang.get();

        Optional<chitietdonhang> optionalChiTiet = chiTietDonHangRepository.findByDonHangAndSanPham(donHang, sanPhamRepository.findById(sanPhamId).orElse(null));
        if (optionalChiTiet.isEmpty()) {
            return ResponseEntity.badRequest().body(null);
        }

        chitietdonhang chiTiet = optionalChiTiet.get();
        sanpham sanPham = chiTiet.getSanPham();

        // üìå **Ki·ªÉm tra t·ªìn kho**: Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng theo s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa s·∫£n ph·∫©m
        if (quantity > sanPham.getSoLuong()) {
            quantity = sanPham.getSoLuong();
        }

        chiTiet.setSoLuong(quantity);
        chiTietDonHangRepository.save(chiTiet);

        // üìå **C·∫≠p nh·∫≠t t·ªïng ti·ªÅn**: T√≠nh l·∫°i t·ªïng ti·ªÅn sau khi thay ƒë·ªïi s·ªë l∆∞·ª£ng
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (chitietdonhang item : chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(currentUser.getId(), "Ch∆∞a thanh to√°n")) {
            totalAmount = totalAmount.add(item.getGia().multiply(BigDecimal.valueOf(item.getSoLuong())));
        }
        donHang.setTongTien(totalAmount);
        donHangRepository.save(donHang);

        // üìå **Tr·∫£ ph·∫£n h·ªìi JSON**: G·ª≠i t·ªïng ti·ªÅn v√† s·ªë l∆∞·ª£ng t·ªìn kho ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
        Map<String, Object> response = new HashMap<>();
        response.put("totalAmount", totalAmount);
        response.put("soLuongTonKho", sanPham.getSoLuong());

        return ResponseEntity.ok(response);
    }

    @PostMapping("/remove")
    public String removeFromCart(@RequestParam Long sanPhamId, HttpSession session) {
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            return "redirect:/login";
        }

        Optional<sanpham> optionalSanPham = sanPhamRepository.findById(sanPhamId);
        if (optionalSanPham.isEmpty()) {
            return "redirect:/cart/view";
        }
        sanpham sanPham = optionalSanPham.get();

        Optional<donhang> optionalDonHang = donHangRepository.findByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        if (optionalDonHang.isEmpty()) {
            return "redirect:/cart/view";
        }
        donhang donHang = optionalDonHang.get();

        Optional<chitietdonhang> optionalChiTiet = chiTietDonHangRepository.findByDonHangAndSanPham(donHang, sanPham);
        if (optionalChiTiet.isEmpty()) {
            return "redirect:/cart/view";
        }

        chitietdonhang chiTiet = optionalChiTiet.get();

        // üìå **X√≥a s·∫£n ph·∫©m**: X√≥a chi ti·∫øt ƒë∆°n h√†ng ch·ª©a s·∫£n ph·∫©m kh·ªèi gi·ªè
        chiTietDonHangRepository.delete(chiTiet);

        // üìå **C·∫≠p nh·∫≠t t·ªïng ti·ªÅn**: Tr·ª´ gi√° tr·ªã s·∫£n ph·∫©m v·ª´a x√≥a ra kh·ªèi t·ªïng ti·ªÅn
        donHang.setTongTien(donHang.getTongTien().subtract(chiTiet.getGia().multiply(BigDecimal.valueOf(chiTiet.getSoLuong()))));
        donHangRepository.save(donHang);

        // üìå **C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng**: ƒê·∫øm l·∫°i s·ªë lo·∫°i s·∫£n ph·∫©m trong gi·ªè
        int cartCount = chiTietDonHangRepository.countByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        session.setAttribute("cartCount", cartCount);

        return "redirect:/cart/view";
    }

    @GetMapping("/count")
    @ResponseBody
    public int getCartCount(HttpSession session) {
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            return 0;
        }

        // üìå **ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m**: Tr·∫£ v·ªÅ s·ªë lo·∫°i s·∫£n ph·∫©m trong gi·ªè ƒë·ªÉ hi·ªÉn th·ªã tr√™n giao di·ªán
        return (int) chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(
                currentUser.getId(), "Ch∆∞a thanh to√°n"
        ).stream().map(chitietdonhang::getSanPham).distinct().count();
    }

    @PostMapping("/checkout")
    @Transactional
    public String checkout(HttpSession session) {
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            return "redirect:/login";
        }

        Optional<donhang> optionalDonHang = donHangRepository.findByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        if (optionalDonHang.isEmpty()) {
            return "redirect:/cart/view";
        }

        // üìå **Thanh to√°n**: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "Ch·ªù x√°c nh·∫≠n"
        donhang donHang = optionalDonHang.get();
        donHang.setTrangThai("Ch·ªù x√°c nh·∫≠n");
        donHangRepository.save(donHang);

        // üìå **X√≥a gi·ªè h√†ng**: ƒê·∫∑t l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè v·ªÅ 0
        session.setAttribute("cartCount", 0);

        // üìå **Chuy·ªÉn ƒë·∫øn h√≥a ƒë∆°n**: Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang xem h√≥a ƒë∆°n v·ªõi ID ƒë∆°n h√†ng
        return "redirect:/invoice/view?donHangId=" + donHang.getId();
    }
}