package com.example.assignment_java5.controller;

import com.example.assignment_java5.Dto.KhachHangDTO;
import com.example.assignment_java5.model.nhanvien;
import com.example.assignment_java5.repository.nhanvienrepository;
import com.example.assignment_java5.service.KhachHangService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@Controller
@RequestMapping("/admin")
public class KhachHangController {
    @Autowired
    private KhachHangService khachHangService;

    @Autowired
    private nhanvienrepository NhanVienRepository;

    @GetMapping("/khachhang")
    public String getKhachHang(Model model) {
        // üìå **L·∫•y danh s√°ch kh√°ch h√†ng**: G·ªçi service ƒë·ªÉ l·∫•y t·∫•t c·∫£ th√¥ng tin kh√°ch h√†ng
        List<KhachHangDTO> danhSachKhachHang = khachHangService.getAllKhachHang();

        // üìå **Th·ªëng k√™ kh√°ch h√†ng**: L·∫•y d·ªØ li·ªáu th·ªëng k√™ (t·ªïng, ƒëang ho·∫°t ƒë·ªông, ƒë√£ kh√≥a)
        Map<String, Integer> thongKe = khachHangService.thongKeKhachHang();

        // üìå **Truy·ªÅn d·ªØ li·ªáu v√†o Model**: Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã tr√™n giao di·ªán qu·∫£n l√Ω kh√°ch h√†ng
        model.addAttribute("danhSachKhachHang", danhSachKhachHang);
        model.addAttribute("tongKhachHang", thongKe.get("tongKhachHang"));
        model.addAttribute("dangHoatDong", thongKe.get("dangHoatDong"));
        model.addAttribute("daKhoa", thongKe.get("daKhoa"));

        return "quanlykhachhang";
    }

    @PostMapping("/khachhang/update-status")
    @ResponseBody
    public ResponseEntity<?> updateKhachHangStatus(@RequestParam Long id, @RequestParam String trangThai) {
        try {
            // üìå **Ghi log ki·ªÉm tra**: In th√¥ng tin request ƒë·ªÉ debug v√† x√°c nh·∫≠n d·ªØ li·ªáu ƒë·∫ßu v√†o
            System.out.println("Nh·∫≠n request c·∫≠p nh·∫≠t tr·∫°ng th√°i: ID=" + id + ", Tr·∫°ng th√°i m·ªõi=" + trangThai);

            // üìå **T√¨m kh√°ch h√†ng**: Ki·ªÉm tra xem kh√°ch h√†ng c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
            Optional<nhanvien> optionalKhachHang = NhanVienRepository.findById(id);

            if (optionalKhachHang.isPresent()) {
                nhanvien khachHang = optionalKhachHang.get();
                System.out.println("T√¨m th·∫•y nh√¢n vi√™n: " + khachHang.getTenNhanVien() + ", Tr·∫°ng th√°i c≈©=" + khachHang.getTrangThai());

                // üìå **C·∫≠p nh·∫≠t tr·∫°ng th√°i**: Ch·ªâ c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i m·ªõi kh√°c tr·∫°ng th√°i c≈©
                if (khachHang.getTrangThai() == null || !khachHang.getTrangThai().equals(trangThai)) {
                    khachHang.setTrangThai(trangThai);
                    NhanVienRepository.save(khachHang); // L∆∞u thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu
                    System.out.println("C·∫≠p nh·∫≠t th√†nh c√¥ng tr·∫°ng th√°i m·ªõi: " + khachHang.getTrangThai());

                    // üìå **Tr·∫£ ph·∫£n h·ªìi JSON**: G·ª≠i tr·∫°ng th√°i m·ªõi v·ªÅ giao di·ªán ƒë·ªÉ c·∫≠p nh·∫≠t
                    return ResponseEntity.ok(Collections.singletonMap("trangThai", khachHang.getTrangThai()));
                } else {
                    System.out.println("Tr·∫°ng th√°i kh√¥ng thay ƒë·ªïi.");
                    return ResponseEntity.ok(Collections.singletonMap("error", "Tr·∫°ng th√°i kh√¥ng thay ƒë·ªïi!"));
                }
            } else {
                System.out.println("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi ID: " + id);
                // üìå **Th√¥ng b√°o l·ªói**: Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng t√¨m th·∫•y kh√°ch h√†ng
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Collections.singletonMap("error", "Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i!"));
            }
        } catch (Exception e) {
            System.err.println("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + e.getMessage());
            // üìå **X·ª≠ l√Ω ngo·∫°i l·ªá**: Tr·∫£ v·ªÅ l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ trong qu√° tr√¨nh c·∫≠p nh·∫≠t
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Collections.singletonMap("error", "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i!"));
        }
    }

    @GetMapping("/khachhang/{id}")
    @ResponseBody
    public ResponseEntity<?> getKhachHangById(@PathVariable Long id) {
        try {
            // üìå **L·∫•y th√¥ng tin kh√°ch h√†ng**: G·ªçi service ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt c·ªßa kh√°ch h√†ng theo ID
            KhachHangDTO khachHang = khachHangService.getKhachHangById(id);

            if (khachHang != null) {
                // üìå **Tr·∫£ ph·∫£n h·ªìi JSON**: G·ª≠i th√¥ng tin kh√°ch h√†ng v·ªÅ giao di·ªán n·∫øu t√¨m th·∫•y
                return ResponseEntity.ok(khachHang);
            } else {
                // üìå **Th√¥ng b√°o l·ªói**: Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng t√¨m th·∫•y kh√°ch h√†ng
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Collections.singletonMap("error", "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng!"));
            }
        } catch (Exception e) {
            // üìå **X·ª≠ l√Ω ngo·∫°i l·ªá**: Tr·∫£ v·ªÅ l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ trong qu√° tr√¨nh truy v·∫•n
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Collections.singletonMap("error", "L·ªói l·∫•y th√¥ng tin kh√°ch h√†ng!"));
        }
    }
}